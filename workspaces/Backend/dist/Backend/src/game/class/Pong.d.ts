import { Server } from 'socket.io';
import { ActionDTO } from '../dto/Action.dto';
import { UserInfo } from './UserInfo';
import { Game } from '@/utils/typeorm/Game.entity';
import { GameService } from '../service/game.service';
import { ScoreService } from '@/score/service/score.service';
import { ColoredLogger } from '../colored-logger';
import { ScoreInfo } from '@transcendence/shared/types/Score.types';
import { StatsService } from '@/stats/service/stats.service';
export declare class Pong {
    private readonly server;
    readonly gameId: string;
    private readonly gameDB;
    private readonly gameService;
    private readonly scoreService;
    private readonly statsService;
    private readonly logger;
    private lastTimestamp;
    private isGameLoopRunning;
    private framesThisSecond;
    private lastFpsUpdate;
    private currentFps;
    private updateGameInterval;
    private disconnectLoopRunning;
    private pauseLoopRunning;
    private playerLeft;
    private playerRight;
    private spectators;
    private data;
    constructor(server: Server, gameId: string, gameDB: Game, gameService: GameService, scoreService: ScoreService, statsService: StatsService, logger: ColoredLogger, score: ScoreInfo);
    initPlayer(): Promise<void>;
    join(user: UserInfo): Promise<any>;
    private pauseLoop;
    private startPauseLoop;
    private stopPauseLoop;
    private handleStop;
    private handlePush;
    playerAction(action: ActionDTO): void;
    private sendPlayerData;
    private sendStatus;
    private sendUpdate;
    private startGameLoop;
    private gameLoop;
    private stopGameLoop;
    private updateDBScore;
    private updateDBStatus;
    private updateDBStats;
    private joinAsPlayer;
    private joinAsHost;
    private joinAsOpponent;
    disconnect(user: UserInfo, manual: boolean): Promise<any>;
    private disconnectLoop;
    private startDisconnectLoop;
    private stopDisconnectLoop;
    private disconnectPlayer;
    private rageQuit;
}
